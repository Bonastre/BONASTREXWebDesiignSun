<!doctype html>

<html lang="{{ request.locale.iso_code }}" dir="{% render 'direction' %}">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, maximum-scale=5.0">

    <title>{% if page_title == blank %}{{ shop.name }}{% else %}{{ page_title }}{% if current_page != 1 %} &ndash; {{ 'general.page' | t: page: current_page }}{% endif %}{% endif %}</title>

    {%- if page_description -%}
      <meta name="description" content="{{ page_description | escape }}">
    {%- endif -%}

    <link rel="canonical" href="{{ canonical_url }}">

    {%- if settings.favicon -%}
      <link rel="shortcut icon" href="{{ settings.favicon | image_url: width: 96 }}">
      <link rel="apple-touch-icon" href="{{ settings.favicon | image_url: width: 180 }}">
    {%- endif -%}

    {%- comment -%}Few prefetch to increase performance on commonly used third-parties{%- endcomment -%}
    <link rel="preconnect" href="https://fonts.shopifycdn.com" crossorigin>

    {%- unless settings.heading_font.system? -%}
      <link rel="preload" href="{{ settings.heading_font | font_url }}" as="font" type="font/woff2" crossorigin>
    {%- endunless -%}

    {%- unless settings.text_font.system? -%}
      <link rel="preload" href="{{ settings.text_font | font_url }}" as="font" type="font/woff2" crossorigin>
    {%- endunless -%}

    {%- render 'social-meta-tags' -%}
    {%- render 'microdata-schema' -%}
    {%- render 'css-variables' -%}
    {%- render 'js-variables' -%}

    {%- if request.page_type == 'gift_card' -%}
      <script src="{{ 'vendor/qrcode.js' | shopify_asset_url }}" defer></script>
    {%- endif -%}

    <script>
      if (!(HTMLScriptElement.supports && HTMLScriptElement.supports('importmap'))) {
        const importMapPolyfill = document.createElement('script');
        importMapPolyfill.async = true;
        importMapPolyfill.src = "{{ 'es-module-shims.min.js' | asset_url }}";

        document.head.appendChild(importMapPolyfill);
      }
    </script>

    <script type="importmap">
      {%- comment -%}On Safari 16.3 and lower, a polyfill is used to load importmap{%- endcomment -%}
      {
        "imports": {
          "vendor": "{{ 'vendor.min.js' | asset_url }}",
          "theme": "{{ 'theme.js' | asset_url }}",
          "photoswipe": "{{ 'photoswipe.min.js' | asset_url }}"
        }
      }
    </script>

    {{ 'jquery.min.js' | asset_url | preload_tag: as: 'script' }}
    <script src="{{ 'jquery.min.js' | asset_url }}" defer></script>

    <script type="module" src="{{ 'vendor.min.js' | asset_url }}"></script>
    <script type="module" src="{{ 'theme.js' | asset_url }}"></script>
    <script src="{{ 'custom.js' | asset_url }}" defer></script>

    {{ content_for_header }}

    {{- 'theme.css' | asset_url | stylesheet_tag: preload: true -}}
  </head>

  {% liquid
    assign features_class = ''

    if settings.show_button_transition
      assign features_class = features_class | append: 'features--button-transition '
    endif

    if settings.show_image_zoom_on_hover
      assign features_class = features_class | append: 'features--zoom-image '
    endif

    if settings.show_page_transition
      assign features_class = features_class | append: 'features--page-transition '
    endif
  %}

  <body class="{{ features_class }} color-scheme color-scheme--{{ settings.default_color_scheme.id }}">

  <script>
    // Wishlist feature: Add or remove the current product from the wishlist
    function toggleWishlist() {
      const pdpData = {
        productTitle: "{{ product.title }}",
        productImg: "{{ product.featured_image | img_url: '' }}",
        productPrice: "{{ product.price | money | remove_first: '' }}",
        productUrl: "{{ product.url }}"
      };

      let wishlistData = JSON.parse(localStorage.getItem('wishlist')) || [];
      const isAlreadyInWishlist = wishlistData.some(item => item.productTitle === pdpData.productTitle);
      const wishlistButton = document.getElementsByClassName('wishlist_button')[0];

      if (!isAlreadyInWishlist) {
        wishlistData.push(pdpData);
        localStorage.setItem('wishlist', JSON.stringify(wishlistData));
        // alert('Product added to wishlist:', pdpData.productTitle);
        wishlistButton.innerHTML = `<svg class="heart-filled" width="35px" height="35px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M19.3 5.71002C18.841 5.24601 18.2943 4.87797 17.6917 4.62731C17.0891 4.37666 16.4426 4.2484 15.79 4.25002C15.1373 4.2484 14.4909 4.37666 13.8883 4.62731C13.2857 4.87797 12.739 5.24601 12.28 5.71002L12 6.00002L11.72 5.72001C10.7917 4.79182 9.53273 4.27037 8.22 4.27037C6.90726 4.27037 5.64829 4.79182 4.72 5.72001C3.80386 6.65466 3.29071 7.91125 3.29071 9.22002C3.29071 10.5288 3.80386 11.7854 4.72 12.72L11.49 19.51C11.6306 19.6505 11.8212 19.7294 12.02 19.7294C12.2187 19.7294 12.4094 19.6505 12.55 19.51L19.32 12.72C20.2365 11.7823 20.7479 10.5221 20.7442 9.21092C20.7405 7.89973 20.2218 6.64248 19.3 5.71002Z" fill="#000000"/>
        </svg>
        <p class="wishlist_text">In Your Wishlist</p>
        `;
      } else {
        wishlistData = wishlistData.filter(item => item.productTitle !== pdpData.productTitle);
        localStorage.setItem('wishlist', JSON.stringify(wishlistData));
        // alert('Product removed from wishlist:', pdpData.productTitle);
        wishlistButton.innerHTML = `<svg class="heart-outline" width="40px" height="40px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <rect x="0" fill="none" width="24" height="24"/>

          <g>

          <path d="M16.5 4.5c2.206 0 4 1.794 4 4 0 4.67-5.543 8.94-8.5 11.023C9.043 17.44 3.5 13.17 3.5 8.5c0-2.206 1.794-4 4-4 1.298 0 2.522.638 3.273 1.706L12 7.953l1.227-1.746c.75-1.07 1.975-1.707 3.273-1.707m0-1.5c-1.862 0-3.505.928-4.5 2.344C11.005 3.928 9.362 3 7.5 3 4.462 3 2 5.462 2 8.5c0 5.72 6.5 10.438 10 12.85 3.5-2.412 10-7.13 10-12.85C22 5.462 19.538 3 16.5 3z"/>

          </g>

          </svg>
          <p class="wishlist_text">Not In Wishlist</p>
          `;
      }

      // Update the display after modifying the wishlist
      displayWishlist();
    }

    // Remove the specified product from the wishlist
    function removeFromWishlist(productTitle) {
      let wishlistData = JSON.parse(localStorage.getItem('wishlist')) || [];
      wishlistData = wishlistData.filter(item => item.productTitle !== productTitle);
      localStorage.setItem('wishlist', JSON.stringify(wishlistData));
      // Update the display after removing from the wishlist
      displayWishlist(pdpData);
    }

    // Display wishlist items
    function displayWishlist(pdpData) {
      const wishlistData = JSON.parse(localStorage.getItem('wishlist')) || [];

      if (wishlistData.length === 0) {
        console.log('Wishlist is empty');
        return;
      }

      const wishlistHtml = wishlistData.map(item => `
            <div class="wishlist-product__list">
                <div class="c-product">
                <a href="${item.productUrl}">
                    <img src="${item.productImg}" alt="${item.productTitle}">
                    </a>
                    <h3 class="c-product__title card__heading h5">
                        <a class="full-unstyled-link" href="${item.productUrl}">${item.productTitle}</a>
                    </h3>
                    <p>${item.productPrice}</p>
      {% comment %}<button onclick="removeFromWishlist('${item.productTitle}')">Remove</button> {% endcomment %}
                </div>
            </div>
        `).join('');

      const wishlistBlock = document.querySelector('.js-wishlistBlock');

      // Add a check to ensure the element is not null before setting innerHTML
      if (wishlistBlock) {
        wishlistBlock.innerHTML = wishlistHtml;
      } else {
        console.error('Element with class "js-wishlistBlock" not found');
      }
    }

    // Execute this function on DOM content load
    document.addEventListener('DOMContentLoaded', function () {
      // Fetch the wishlist data from localStorage
      const wishlistData = JSON.parse(localStorage.getItem('wishlist')) || [];

      // Set the initial button text based on whether the product is in the wishlist or not
      const wishlistButtons = document.querySelectorAll('.wishlist_button'); // Use querySelector instead of getElementsByClassName
      const productTitle = "{{ product.title }}";

      wishlistButtons.forEach(function (wishlistButton) {
      if (wishlistButton) {
        const isAlreadyInWishlist = wishlistData.some(item => item.productTitle === productTitle);
        wishlistButton.innerHTML = isAlreadyInWishlist ? `<svg class="heart-filled" width="35px" height="35px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M19.3 5.71002C18.841 5.24601 18.2943 4.87797 17.6917 4.62731C17.0891 4.37666 16.4426 4.2484 15.79 4.25002C15.1373 4.2484 14.4909 4.37666 13.8883 4.62731C13.2857 4.87797 12.739 5.24601 12.28 5.71002L12 6.00002L11.72 5.72001C10.7917 4.79182 9.53273 4.27037 8.22 4.27037C6.90726 4.27037 5.64829 4.79182 4.72 5.72001C3.80386 6.65466 3.29071 7.91125 3.29071 9.22002C3.29071 10.5288 3.80386 11.7854 4.72 12.72L11.49 19.51C11.6306 19.6505 11.8212 19.7294 12.02 19.7294C12.2187 19.7294 12.4094 19.6505 12.55 19.51L19.32 12.72C20.2365 11.7823 20.7479 10.5221 20.7442 9.21092C20.7405 7.89973 20.2218 6.64248 19.3 5.71002Z" fill="#000000"/>
        </svg> <p class="wishlist_text">In Your Wishlist</p>` : `<svg width="35px" height="35px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="heart-outline">

        <rect x="0" fill="none" width="24" height="24"/>

        <g>

        <path d="M16.5 4.5c2.206 0 4 1.794 4 4 0 4.67-5.543 8.94-8.5 11.023C9.043 17.44 3.5 13.17 3.5 8.5c0-2.206 1.794-4 4-4 1.298 0 2.522.638 3.273 1.706L12 7.953l1.227-1.746c.75-1.07 1.975-1.707 3.273-1.707m0-1.5c-1.862 0-3.505.928-4.5 2.344C11.005 3.928 9.362 3 7.5 3 4.462 3 2 5.462 2 8.5c0 5.72 6.5 10.438 10 12.85 3.5-2.412 10-7.13 10-12.85C22 5.462 19.538 3 16.5 3z"/>

        </g>

        </svg>
        <p class="wishlist_text">Not In Wishlist</p>
        `;
      } else {
        console.error('Element with class "wishlist_button" not found');
      }
      });

      // Display wishlist items
      displayWishlist();
    });
  </script>

    {% if settings.wishlist-floating-button-position %}
      <a href="/pages/wishlist" class="button-floating">
        <svg width="30px" height="30px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <rect x="0" fill="none" width="24" height="24"/>

          <g>

          <path d="M16.5 4.5c2.206 0 4 1.794 4 4 0 4.67-5.543 8.94-8.5 11.023C9.043 17.44 3.5 13.17 3.5 8.5c0-2.206 1.794-4 4-4 1.298 0 2.522.638 3.273 1.706L12 7.953l1.227-1.746c.75-1.07 1.975-1.707 3.273-1.707m0-1.5c-1.862 0-3.505.928-4.5 2.344C11.005 3.928 9.362 3 7.5 3 4.462 3 2 5.462 2 8.5c0 5.72 6.5 10.438 10 12.85 3.5-2.412 10-7.13 10-12.85C22 5.462 19.538 3 16.5 3z"/>

          </g>
        </svg>
        <p class="wishlist_text">Your Wishlist</p>
      </a>
    {% endif %}



    {%- render 'shadow-dom-templates' -%}

    <loading-bar class="loading-bar" aria-hidden="true"></loading-bar>
    <a href="#main" allow-hash-change class="skip-to-content sr-only">{{ 'general.accessibility.skip_to_content' | t }}</a>

    <span id="header-scroll-tracker" style="position: absolute; width: 1px; height: 1px; top: var(--header-scroll-tracker-offset, 10px); left: 0;">
      {%- comment -%}
        This allows our theme to track when the user has scrolled a given amount of pixels, without relying on a global scroll listener. This helps
        to improve performance and reduce reflows.
      {%- endcomment -%}
    </span>

    {%- if request.page_type != 'password' -%}
      {%- sections 'header-group' -%}
      {%- sections 'overlay-group' -%}
    {%- endif -%}

    <main id="main" class="anchor">
      {{ content_for_layout }}

      {%- comment -%}
      IMPLEMENTATION NOTE: For best semantics, having the footer group outside the main would be slightly better, but
        moving it inside the main allows to have all the sections (including sections inside the footer group) to be
        consecutive, and hence having a cleaner margin collapsing management.
      {%- endcomment -%}
      {%- if request.page_type != 'password' -%}
        {%- sections 'footer-group' -%}
      {%- endif -%}
    </main>
  </body>
</html>
